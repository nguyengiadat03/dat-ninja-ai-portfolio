import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import "./ChatBot.css";
import {
  MessageCircle,
  Send,
  X,
  Image,
  MoreHorizontal,
  Sparkles,
} from "lucide-react";

interface Message {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
}

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content:
        "Xin ch√†o! T√¥i l√† ƒê·∫°tGPT ü§ñ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ Nguy·ªÖn Gia ƒê·∫°t v√† Ch∆∞∆°ng tr√¨nh TTS Ninja AI. B·∫°n mu·ªën bi·∫øt ƒëi·ªÅu g√¨?",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickQuestions = [
    "Nguy·ªÖn Gia ƒê·∫°t l√† ai?",
    "Ch∆∞∆°ng tr√¨nh Ninja AI l√† g√¨?",
    "L√†m th·∫ø n√†o ƒë·ªÉ ·ª©ng tuy·ªÉn?",
    "Nh·ªØng k·ªπ nƒÉng c·∫ßn thi·∫øt?",
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const [sessionId, setSessionId] = useState<string | null>(null);
  const [sessionKey] = useState(() => 'session_' + Math.random().toString(36).substr(2, 9));

  const sendMessage = async (content: string) => {
    if (!content.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, newMessage]);
    setInputValue("");
    setIsTyping(true);

    try {
      const response = await fetch('https://yoxkoxpwgiwskdnjjhyd.supabase.co/functions/v1/chatbot-ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: content,
          sessionId,
          sessionKey,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        const aiResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: data.message,
          isUser: false,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, aiResponse]);
        
        // Save session ID for future messages
        if (data.sessionId && !sessionId) {
          setSessionId(data.sessionId);
        }
      } else {
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
          isUser: false,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, errorMessage]);
      }
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "Xin l·ªói, c√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.",
        isUser: false,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const getAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();

    if (
      lowerMessage.includes("ƒë·∫°t") ||
      lowerMessage.includes("nguy·ªÖn gia ƒë·∫°t")
    ) {
      return "Nguy·ªÖn Gia ƒê·∫°t l√† m·ªôt l·∫≠p tr√¨nh vi√™n FrontEnd chuy√™n nghi·ªáp v·ªõi kinh nghi·ªám trong vi·ªác ph√°t tri·ªÉn ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i. Anh ·∫•y c√≥ th·∫ø m·∫°nh trong vi·ªác k·∫øt h·ª£p ngh·ªá thu·∫≠t v√† c√¥ng ngh·ªá ƒë·ªÉ t·∫°o n√™n nh·ªØng s·∫£n ph·∫©m web mang d·∫•u ·∫•n ri√™ng.";
    }

    if (
      lowerMessage.includes("ninja ai") ||
      lowerMessage.includes("ch∆∞∆°ng tr√¨nh")
    ) {
      return "Ch∆∞∆°ng tr√¨nh Th·ª±c t·∫≠p sinh Ninja AI l√† m·ªôt ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o chuy√™n s√¢u v·ªÅ AI v√† ph√°t tri·ªÉn web. Ch∆∞∆°ng tr√¨nh t·∫≠p trung v√†o vi·ªác ƒë√†o t·∫°o nh·ªØng k·ªπ nƒÉng th·ª±c t·∫ø v√† cung c·∫•p kinh nghi·ªám l√†m vi·ªác v·ªõi c√°c d·ª± √°n th·ª±c t·∫ø.";
    }

    if (lowerMessage.includes("·ª©ng tuy·ªÉn") || lowerMessage.includes("apply")) {
      return "ƒê·ªÉ ·ª©ng tuy·ªÉn ch∆∞∆°ng tr√¨nh Ninja AI, b·∫°n c√≥ th·ªÉ ƒëi·ªÅn form tr√™n trang Ninja AI ho·∫∑c g·ª≠i CV v√† portfolio c·ªßa b·∫°n. Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm nh·ªØng ·ª©ng vi√™n c√≥ ƒëam m√™ v·ªõi c√¥ng ngh·ªá v√† mong mu·ªën h·ªçc h·ªèi.";
    }

    if (lowerMessage.includes("k·ªπ nƒÉng") || lowerMessage.includes("skill")) {
      return "C√°c k·ªπ nƒÉng c·∫ßn thi·∫øt bao g·ªìm: HTML/CSS, JavaScript, React, c∆° b·∫£n v·ªÅ AI/ML, v√† quan tr·ªçng nh·∫•t l√† tinh th·∫ßn h·ªçc h·ªèi. Ch√∫ng t√¥i s·∫Ω ƒë√†o t·∫°o t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.";
    }

    // return "C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ Nguy·ªÖn Gia ƒê·∫°t, ch∆∞∆°ng tr√¨nh Ninja AI, qu√° tr√¨nh ·ª©ng tuy·ªÉn, v√† c√°c k·ªπ nƒÉng c·∫ßn thi·∫øt. B·∫°n c√≥ c√¢u h·ªèi c·ª• th·ªÉ n√†o kh√°c kh√¥ng?";
    return "B·∫°n c√≥ th·ªÉ h·ªèi c√¢u n√†o kh√¥n h∆°n ƒë∆∞·ª£c kh√¥ng???";
  };

  const handleQuickQuestion = (question: string) => {
    sendMessage(question);
  };

  return (
    <>
      {/* Chat Widget Button */}
      {!isOpen && (
        <div className="fixed bottom-6 right-6 z-50">
          <Button
            onClick={() => setIsOpen(true)}
            className="w-14 h-14 rounded-full bg-gradient-primary text-white shadow-green animate-pulse-glow btn-scale relative overflow-hidden chatbot-pulse"
          >
            <MessageCircle className="w-6 h-6" />
          </Button>
        </div>
      )}

      {/* Chat Window */}
      {isOpen && (
        <Card className="fixed bottom-6 right-6 w-[400px] h-[500px] z-50 flex flex-col bg-card/95 backdrop-blur-md border shadow-xl animate-scale-in">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-border bg-gradient-primary text-white rounded-t-lg">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                <Sparkles className="w-4 h-4" />
              </div>
              <div>
                <h3 className="text-center font-semibold">ƒê·∫°tGPT</h3>
                <p className="text-center text-xs text-white/80">
                  AI Assistant
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="text-white hover:bg-white/20"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${
                  message.isUser ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-lg text-sm ${
                    message.isUser
                      ? "bg-primary text-white rounded-br-none"
                      : "bg-muted text-foreground rounded-bl-none"
                  }`}
                >
                  {message.content}
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-muted text-foreground p-3 rounded-lg rounded-bl-none text-sm">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce animate-bounce-delay-1"></div>
                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce animate-bounce-delay-2"></div>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions */}
          {messages.length === 1 && (
            <div className="px-4 py-2 border-t border-border bg-muted/30">
              <div className="text-xs text-muted-foreground mb-2">
                C√¢u h·ªèi g·ª£i √Ω:
              </div>
              <div className="grid grid-cols-1 gap-1">
                {quickQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="secondary"
                    size="sm"
                    onClick={() => handleQuickQuestion(question)}
                    className="text-xs h-auto p-2 justify-start text-left"
                  >
                    {question}
                  </Button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="p-4 border-t border-border">
            <div className="flex space-x-2 items-center">
              <Button
                variant="ghost"
                size="sm"
                className="text-muted-foreground hover:text-primary"
              >
                <Image className="w-4 h-4" />
              </Button>
              <Input
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === "Enter") sendMessage(inputValue);
                }}
                className="flex-1 text-sm"
              />
              <Button
                variant="ghost"
                size="sm"
                className="text-muted-foreground hover:text-primary"
              >
                <MoreHorizontal className="w-4 h-4" />
              </Button>
              <Button
                onClick={() => sendMessage(inputValue)}
                size="sm"
                className="bg-primary text-white hover:bg-primary-dark"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </Card>
      )}
    </>
  );
};

export default ChatBot;
